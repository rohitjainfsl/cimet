In this question, the candidate needs to implement a function countBy(collection, iteratee) similar to the Lodash's countBy.

The countBy function should create an object where each key is generated by applying the iteratee function to elements in the collection. The value of each key is the number of times that key is produced. The iteratee is applied to each element in the collection.

Arguments
 - collection (Array | Object): The collection to iterate over.
 - iteratee (Function): The iteratee function to transform elements. The function is invoked with one argument: (value).

Returns
 - (Object): Returns the composed aggregate object.

Examples
countBy([4,3,3,1,4,4], e => e)
// { '1': 1, '3': 2, '4': 1 }

countBy([6.1, 4.2, 6.3], Math.floor);
// => { '4': 1, '6': 2 }
 
countBy(['one', 'two', 'three'], 'length');
// => { '3': 2, '5': 1 }

countBy([ { a: 1 }, { a: 1 }, { a: 3 } ], e => e.a)
// { '1': 2, '3': 1 }

countBy([], e => e)
// {}

countBy([{ a: 1 }, { a: 2 }], (e) => e.b); 
// => { undefined: 2 }

countBy([6.1, 4.2, 6.3]);
// { '6.1': 1, '4.2': 1, '6.3': 1 };

countBy([ { a: 1 }, { a: 1 }, { a: 3 } ])
// { '[object Object]': 3 }
